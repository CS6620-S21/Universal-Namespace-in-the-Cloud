# How To

# >>> run oc login command.
# ## Next step is to create a template from this file

# >>>> oc create -f <this_file.yaml>

# ## Once the template is created successfuly, create the app using the tempplate created

# >>> oc new-app <template_name>  
# Note: You can find template name in the file's first section

# Successful creation should create complete deployment of upspinserver with ports forwarded

# Additional Notes

# To delete all resources created for a deployment
# >>> oc delete all --selector app=<deployment_name>

# To delete template
# >>> oc delete template/<template_name>

# To delete image stream tag
# >>> oc delete is/<image_stream_tag_name>

# The oc client needs to be the latest version, the current version is 4.7.2

# Template to deploy upspin server
kind: Template
apiVersion: v1
metadata:
  name: ruichen-template-secure

# Image stream object
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      labels:
        app: "${{DEPLOYMENT_NAME}}"
      name: "${{IMAGE_TAG}}"
      namespace: cs6620-sp2021-universal-namespace
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations: 
        openshift.io/imported-from: "${{IMAGE}}"
        from:
          kind: DockerImage
          name: "${{IMAGE}}"
        importPolicy: {}
        name: "${{IMAGE_TAG}}"
        referencePolicy:
          type: Source

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        app: "${{DEPLOYMENT_NAME}}"
      name: "${{DEPLOYMENT_NAME}}"
      namespace: cs6620-sp2021-universal-namespace
    spec:
      replicas: 1
      selector:
        app: "${{DEPLOYMENT_NAME}}"
        deploymentconfig: "${{DEPLOYMENT_NAME}}"
      strategy: {}
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            app: "${{DEPLOYMENT_NAME}}"
            deploymentconfig: "${{DEPLOYMENT_NAME}}"
        spec:
          containers:
          - image: "${{IMAGE}}"
            name: "${{IMAGE_TAG}}"
            ports:
            - containerPort: 6443
              protocol: TCP
            - containerPort: 8080
              protocol: TCP
            resources: {}
    status: {}

# Route Object, for the CNAME host name
  - kind: Route
    apiVersion: v1
    metadata:
      labels:
        app: "${{DEPLOYMENT_NAME}}"
      name: "${{ROUTE_NAME}}"
      namespace: cs6620-sp2021-universal-namespace
    spec:
      host: "${{HOST_NAME}}"
      port:
        targetPort: 6443-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: passthrough
      to:
        kind: Service
        name: "${{DEPLOYMENT_NAME}}"
        weight: 100
      wildcardPoloicy: None

# Route Object, for the original host name cnamed by the above host name
  - kind: Route
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/host.generated: "true"
      labels:
        app: "${{DEPLOYMENT_NAME}}"
      name: "${{DEPLOYMENT_NAME}}"
      namespace: cs6620-sp2021-universal-namespace
    spec:
      host: "${{OPENSHIFT_HOST_NAME}}"
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: "${{DEPLOYMENT_NAME}}"
        weight: 100
      wildcardPoloicy: None

  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        app: "${{DEPLOYMENT_NAME}}"
      name: "${DEPLOYMENT_NAME}"
      namespace: cs6620-sp2021-universal-namespace
    spec:
      ports:
        - name: 6443-tcp
          ## Port forwarding configuration
          port: "${{SOURCE_SSL_PORT}}"
          protocol: TCP
          targetPort: 6443
        - name: 8080-tcp
          ## Port forwarding configuration
          port: "${{SOURCE_TCP_PORT}}"
          protocol: TCP
          targetPort: 8080
      selector:
        app: "${{DEPLOYMENT_NAME}}"
        deploymentconfig: "${{DEPLOYMENT_NAME}}"
    status:
      loadBalancer: {}

# Change these parameters according to your needs
parameters:
- name: DEPLOYMENT_NAME
  value: ruichen-6443
  required: true

- name: IMAGE
  value: cloud6620/upspinio:ruichen-6443
  required: true

# Dockerhub image ta
- name: IMAGE_TAG
  value: ruichen-6443

- name: ROUTE_NAME
  value: ruchen-secure-route
  required: true

- name: HOST_NAME
  value: ruichen.mocupspin.com
  required: true

- name: OPENSHIFT_HOST_NAME
  value: ruichen-6443-cs6620-sp2021-universal-namespace.k-apps.osh.massopen.cloud
  required: true

- name: SOURCE_SSL_PORT
  value: "443"
  required: true

- name: SOURCE_TCP_PORT
  value: "80"
  required: true
